[{"kind":2,"language":"ruby","value":"require 'benchmark'\nrequire 'set'\nrequire 'objspace'\nrequire 'concurrent'\n\ndef run_benchmark(x)\n  results = {}\n  memory_usage = {}\n  \n  Benchmark.bm(20) do |bm|\n    hash = Hash.new\n    set = Set.new\n    weak_map = ObjectSpace::WeakMap.new\n    concurrent_map = Concurrent::Map.new\n\n    # Benchmark and measure memory for each data structure\n    [\n      [:hash, hash], [:set, set], [:weak_map, weak_map], [:concurrent_map, concurrent_map]\n    ].each do |name, structure|\n      GC.start # Force garbage collection before measurement\n      initial_memory = ObjectSpace.memsize_of(structure)\n\n      results[:\"#{name}_write\"] = bm.report(\"#{name.to_s.capitalize} write:\") do\n        x.times do |i|\n          case structure\n          when Set\n            structure.add(i)\n          else\n            structure[i] = i\n          end\n        end\n      end\n\n      results[:\"#{name}_read\"] = bm.report(\"#{name.to_s.capitalize} read:\") do\n        x.times do |i|\n          case structure\n          when Set\n            structure.include?(i)\n          else\n            structure.key?(i)\n          end\n        end\n      end\n\n      GC.start # Force garbage collection after operations\n      final_memory = ObjectSpace.memsize_of(structure)\n      memory_usage[name] = final_memory - initial_memory\n    end\n  end\n\n  puts \"\\nResults Table:\"\n  puts \"| Data Structure | Read (ops/s) | Write (ops/s) | Memory Usage (bytes) |\"\n  puts \"|----------------|--------------|---------------|----------------------|\"\n  [\n    [\"Hash\", :hash_read, :hash_write, :hash],\n    [\"Set\", :set_read, :set_write, :set],\n    [\"WeakMap\", :weak_map_read, :weak_map_write, :weak_map],\n    [\"ConcurrentMap\", :concurrent_map_read, :concurrent_map_write, :concurrent_map]\n  ].each do |name, read_key, write_key, mem_key|\n    read_ops = (x / results[read_key].total).round(2)\n    write_ops = (x / results[write_key].total).round(2)\n    mem_usage = memory_usage[mem_key]\n    puts \"| #{name.ljust(14)} | #{read_ops.to_s.ljust(12)} | #{write_ops.to_s.ljust(13)} | #{mem_usage.to_s.ljust(20)} |\"\n  end\nend\n\nrun_benchmark(10_000)"},{"kind":1,"language":"markdown","value":""}]